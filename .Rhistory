)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$`縣市` <-
factor(covid19$`縣市`)
covid19$`性別` <-
factor(covid19$`性別`)
covid19$`是否為境外移入` <-
factor(
covid19$`是否為境外移入`
)
# 可排序類別資料：年齡層
covid19$`年齡層` <-
factor(
covid19$`年齡層`,
ordered=TRUE
)
levels(covid19$`縣市`)
levels(covid19$`性別`)
levels(covid19$`是否為境外移入`)
covid19$`年齡層`
levels(covid19$`年齡層`)
levels(covid19$`性別`)
covid19$`性別` <- factor(covid19$`性別`, c("男","女"))
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
print(population)
class(population) # 判斷出是named integer vector
names(population) # 元素名稱是台灣各縣市
levels(covid19$`縣市`) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$`縣市`) -> levelsInData
population[levelsInData] -> population
population <- sort(population, decreasing=T)
population
newLevels <- names(population)
newLevels
covid19$`縣市` <-
factor(
covid19$`縣市`, levels=newLevels
)
levels(covid19$`縣市`)
table(covid19$`縣市`) -> A
sort(A , decreasing = T) -> A
names(A) -> A
factor(covid19$`縣市` , levels = A) -> covid19$`縣市`
levels(covid19$`縣市`)
levels(covid19$`年齡層`)
level_names <- levels(covid19$`年齡層`)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
sort(startingAges) -> startingAges
covid19$`年齡層` <-
factor(
covid19$`年齡層`, names(startingAges)
)
levels(covid19$`年齡層`)
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[c(3,4)] <- c("C","D")
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
levels(factor1) <- c("0-9歲","10歲以上","0-9歲")
factor1
levels(covid19$`縣市`)
levels(covid19$`性別`)
levels(covid19$`是否為境外移入`)
levels(covid19$`性別`)
covid19$`性別` <- factor(covid19$`性別`, c("男","女"))
covid19$`地區` <- covid19$`縣市`
levels(covid19$`地區`)
currentLevels <- levels(covid19$`地區`)
# 整併
library(stringr)
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$`地區`) <- newLevels
covid19$`地區`
covid19$`地區`
levels(covid19$`地區`) <- newLevels
covid19$`地區` <- covid19$`縣市`
levels(covid19$`地區`)
currentLevels <- levels(covid19$`地區`)
# 整併
library(stringr)
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$`地區`) <- newLevels
covid19$`地區`
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$`縣市` <-
factor(covid19$`縣市`)
covid19$`性別` <-
factor(covid19$`性別`)
covid19$`是否為境外移入` <-
factor(
covid19$`是否為境外移入`
)
covid19$`地區` <- covid19$`縣市`
levels(covid19$`地區`)
currentLevels <- levels(covid19$`地區`)
# 整併
library(stringr)
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$`地區`) <- newLevels
covid19$`地區`
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
library(stringr)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2[c(1,4)],2,2)
)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$`縣市` <-
factor(covid19$`縣市`)
covid19$`性別` <-
factor(covid19$`性別`)
covid19$`是否為境外移入` <-
factor(
covid19$`是否為境外移入`
)
# 可排序類別資料：年齡層
covid19$`年齡層` <-
factor(
covid19$`年齡層`,
ordered=TRUE
)
levels(covid19$`縣市`)
levels(covid19$`性別`)
levels(covid19$`是否為境外移入`)
covid19$`年齡層`
levels(covid19$`年齡層`)
levels(covid19$`性別`)
covid19$`性別` <- factor(covid19$`性別`, c("男","女"))
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
print(population)
class(population) # 判斷出是named integer vector
names(population) # 元素名稱是台灣各縣市
levels(covid19$`縣市`) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$`縣市`) -> levelsInData
population[levelsInData] -> population
population <- sort(population, decreasing=T)
population
newLevels <- names(population)
newLevels
covid19$`縣市` <-
factor(
covid19$`縣市`, levels=newLevels
)
levels(covid19$`縣市`)
table(covid19$`縣市`) -> A
sort(A , decreasing = T) -> A
names(A) -> A
factor(covid19$`縣市` , levels = A) -> covid19$`縣市`
levels(covid19$`縣市`)
levels(covid19$`年齡層`)
level_names <- levels(covid19$`年齡層`)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
sort(startingAges) -> startingAges
covid19$`年齡層` <-
factor(
covid19$`年齡層`, names(startingAges)
)
levels(covid19$`年齡層`)
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[c(3,4)] <- c("C","D")
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
levels(factor1) <- c("0-9歲","10歲以上","0-9歲")
factor1
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
library(stringr)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2[c(1,4)],2,2)
)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$`縣市` <-
factor(covid19$`縣市`)
covid19$`性別` <-
factor(covid19$`性別`)
covid19$`是否為境外移入` <-
factor(
covid19$`是否為境外移入`
)
# 可排序類別資料：年齡層
covid19$`年齡層` <-
factor(
covid19$`年齡層`,
ordered=TRUE
)
levels(covid19$`縣市`)
levels(covid19$`性別`)
levels(covid19$`是否為境外移入`)
covid19$`年齡層`
levels(covid19$`年齡層`)
levels(covid19$`性別`)
covid19$`性別` <- factor(covid19$`性別`, c("男","女"))
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
print(population)
class(population) # 判斷出是named integer vector
names(population) # 元素名稱是台灣各縣市
levels(covid19$`縣市`) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$`縣市`) -> levelsInData
population[levelsInData] -> population
population <- sort(population, decreasing=T)
population
newLevels <- names(population)
newLevels
covid19$`縣市` <-
factor(
covid19$`縣市`, levels=newLevels
)
levels(covid19$`縣市`)
table(covid19$`縣市`) -> A
sort(A , decreasing = T) -> A
names(A) -> A
factor(covid19$`縣市` , levels = A) -> covid19$`縣市`
levels(covid19$`縣市`)
levels(covid19$`年齡層`)
level_names <- levels(covid19$`年齡層`)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
sort(startingAges) -> startingAges
covid19$`年齡層` <-
factor(
covid19$`年齡層`, names(startingAges)
)
levels(covid19$`年齡層`)
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[c(3,4)] <- c("C","D")
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
levels(factor1) <- c("0-9歲","10歲以上","0-9歲")
factor1
covid19$`地區` <- covid19$`縣市`
levels(covid19$`地區`)
currentLevels <- levels(covid19$`地區`)
# 整併
library(stringr)
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$`地區`) <- newLevels
covid19$`地區`
levels(covid19$年齡層)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$年齡層) <- newLevels
covid19$年齡層
levels(covid19$`年齡層`)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$`年齡層`) <- newLevels
covid19$`年齡層`
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
factor2[[6]] <- "差"
factor2 # 元素6變NA
factor2[[6]] <- "差"
factor2 # 元素6變NA
factor2[[6]] <- "差"
factor2 # 元素6變NA
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
# non factor
char1 <- c("小明","小美")
char2 <- c("大雄","技安")
c(char1, char2)
# factor
factor1 <- factor(c("好", "壞", "壞"))
factor2 <- factor(c("壞", "好", "好"))
c(factor1, factor2)
factor1[4:6] <- factor2
factor1
forcats::fct_c(factor1, factor2)
forcats::fct_c(factor1, factor2)
forcats::fct_c(factor1, factor2)
install.packages("forcat")
forcats::fct_c(factor1, factor2)
install.packages("forcats")
forcats::fct_c(factor1, factor2)
factor(covid19$`性別`)
factor(covid19$`性別`)
levels(covid19$`性別`)
levels(covid19$`性別`) <- c("Male" , "Female")
levels(covid19$`性別`)
factor(covid19$`性別`)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
garbageRoutes$linename
str_extract(garbageRoutes$linename , "[A-Z]+路線")
View(garbageRoutes)
str_extract(garbageRoutes$linename , "[:graph:]+路線")
str_extract(garbageRoutes$linename , "[:graph:]+路線") -> garbageRoutes$route
as.factor(str_extract(garbageRoutes$linename , "[:graph:]+路線")) -> garbageRoutes$route
factor(str_extract(garbageRoutes$linename , "[:graph:]+路線")) -> garbageRoutes$route
levels(garbageRoutes$route)
levels(garbageRoutes$route)
table(garbageRoutes$route)
table(garbageRoutes$route) -> C
sort(C) -> C
names(C)
names(C) -> C
names(C) -> garbageRoutes$route
garbageRoutes$route
garbageRoutes$route
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
factor(str_extract(garbageRoutes$linename , "[:graph:]+路線")) -> garbageRoutes$route
table(garbageRoutes$route) -> C
sort(C) -> C
names(C) -> garbageRoutes$route
factor(str_extract(garbageRoutes$linename , "[:graph:]+路線")) -> garbageRoutes$route
table(garbageRoutes$route) -> C
sort(C) -> C
C
C
C
names(C) ->
names(C)
C
names(C) -> newlevels
names(C) -> garbageRoutes$route
names(C) -> garbageRoutes$route
names(C) -> newlevels
names(C) -> levels(garbageRoutes$route)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
factor(str_extract(garbageRoutes$linename , "[:graph:]+路線")) -> garbageRoutes$route
table(garbageRoutes$route) -> C
sort(C) -> C
names(C) -> levels(garbageRoutes$route)
levels(garbageRoutes$route)
factor(str_extract(garbageRoutes$linename , "(?=路線)[:graph:]+"))
factor(str_extract(garbageRoutes$linename , "(?=路線)[:graph:]+")) -> garbageRoutes$time
garbageRoutes$time
View(garbageRoutes)
View(garbageRoutes)
View(garbageRoutes)
garbageRoutes$time
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
factor(str_extract(garbageRoutes$linename , "[:graph:]+路線")) -> garbageRoutes$route
table(garbageRoutes$route) -> C
sort(C) -> C
names(C) -> levels(garbageRoutes$route)
factor(str_extract(garbageRoutes$linename , "(?=線)[:graph:]+")) -> garbageRoutes$time
garbageRoutes$time
str_extract(garbageRoutes$linename , "(?=線)[:graph:]+") -> garbageRoutes$time
garbageRoutes$time
garbageRoutes$time[is.na(garbageRoutes$time)]<-"全天"
garbageRoutes$time
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
factor(str_extract(garbageRoutes$linename , "[:graph:]+路線")) -> garbageRoutes$route
table(garbageRoutes$route) -> C
sort(C) -> C
names(C) -> levels(garbageRoutes$route)
str_extract(garbageRoutes$linename , "(?=路線)[:graph:]+") -> garbageRoutes$time
garbageRoutes$time[is.na(garbageRoutes$time)]<-"全天"
garbageRoutes$time<-
str_extract(garbageRoutes$linename,"(?<=線)[:graph:]+")
factor(str_extract(garbageRoutes$linename , "(?=路線)[:graph:]+")) -> garbageRoutes$time
garbageRoutes$time
garbageRoutes$time[-"路線"]
