knitr::opts_chunk$set(echo = TRUE)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
print(example[c("name","bloodType")])
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens <- (sequenceNums %% 2) == 0
sequenceNums[pick_evens]
x <- c(1,5,8)
y <- c(5,8)
# x裡的元素值是不是屬於y集合
x %in% y
print(example[c("name","residence")])
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
str(transcript100to103)
pick_lawBusiness <- c("法學院" , "商學院")
pick_lawBusiness <- c("法學院" , "商學院")
transcript100to103$`學院` %in% pick_lawBusiness
lawBusiness <- c("法學院" , "商學院")
str(transcript100to103)
set_LawBusiness <- c("法學院" , "商學院")
transcript100to103$`學院` %in% set_LawBusiness -> pick_LawBusiness
factor(transcript100to103$`學院`)
levels(factor(transcript100to103$`學院`))
unique(transcript100to103)
unique(transcript100to103$學院)
levels(factor(transcript100to103$`學院`))
unique(transcript100to103$`學院`)
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理
example$name[pick_fromTaipeiMetro]
example$name[pick_not_fromTaipeiMetro]
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
example$name[pick_not_fromTaipeiMetro]
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理
example$name[pick_not_fromTaipeiMetro]
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
x2 <- c(1,NA,10)
y2 <- c(-1,NA,20)
x3 <- c(NA,"小花")
y3 <- c(NA,"小華")
x2
is.na(x2)
c(22,NA,18) -> a
a==NA
is.na(a)
print(example[c("name","weight")])
pick_na <- is.na(example$weight)
example$name[pick_na]
0/0
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
str(list_victimAges_female$`數目`)
is.na(list_victimAges_female$`數目`) -> pick_na
list_victimAges_female$`數目` <- as.integer(list_victimAges_female$`數目`)
is.na(list_victimAges_female$`數目`) -> pick_na
sum(pick_na)
print(example[c("name","hobby")])
install.packages("stringr")
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
pick_loveFood <- str_detect(example$hobby,"美食")
example$name[pick_loveFood]
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
typeof(garbageRoutes)
class(garbageRoutes)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
#  1 用typeof()函數查詢電腦實質上如何看待garbageRoutes。
typeof(garbageRoutes)
#  2 用class()函數查詢電腦把它能進行的操作運算歸屬於哪一類型。
class(garbageRoutes)
#  2 用class()函數查詢電腦把它能進行的操作運算歸屬於哪一類型。
classof(garbageRoutes)
View(garbageRoutes)
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
# 由linename創造： 可篩選出下午路線的「要/不要」向量pick_afternoonRoutes。
pick_afternoonRoutes <-
stringr::str_detect(garbageRoutes$linename,"下午")
garbageRoutes$linename[pick_afternoonRoutes]
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
# 由linename創造： 可篩選出下午路線的「要/不要」向量pick_afternoonRoutes。
pick_afternoonRoutes <-
stringr::str_detect(garbageRoutes$linename,"下午")
garbageRoutes$linename[pick_afternoonRoutes]
?str_detect
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
library(stringr)
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
stringr::str_detect(CDC_chatbox$Question , "肺炎") -> pick_pneumonia
CDC_chatbox$Question[pick_pneumonia]
stringr::str_detect(CDC_chatbox$Question , "肺炎") -> picked
CDC_chatbox$Question[picked]
