knitr::opts_chunk$set(echo = TRUE)
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
# p=1.2的需求量
demand(1.2)
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
return(q_d)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
function(p){
qs <- 0+2*p
return(qs)
}
function(p){
qs <- 0+2*p
return(qs)
} -> supply function
function(p){
qs <- 0+2*p
return(qs)
} -> supply_function
function(p){
qs <- 0+2*p
return(qs)
} -> supply_function
function(p){
qs <- 0+2*p
return(qs)
} -> supply_function
function(p){
qs <- 0+2*p
return(qs)
} -> supply
supply <- function(p){
qs <- 0+2*p
return(qs)
}
supply(1)
dateInput <- today()
dateInput <- lubridate::today()
dateInput <- lubridate::today()
locationInput <- "新北市"
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 在weatherAtLocation找出符合時間的天氣資訊
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather("臺中市",today())
askSilly_weather("臺中市")#,today())
library(lubridate)
return(now)
what_time_it_is <- function(timezone){
now <- with_tz(now(), tz = timezone)
return(now)
}
what_time_it_is("Europe/Paris")
knitr::opts_chunk$set(echo = TRUE)
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
# 之後才執行以下程式
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
warning("你所輸入的學號不正確")
}
# 之後才執行以下程式
library(stringr)
warning("你所輸入的學號不正確")
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
wa
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
# 之後才執行以下程式
library(stringr)
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
warning("你所輸入的學號不正確")
}
convert_TaiwanDate2WesternDate <- function(twDate){
if(!require("stringr")){
install.packages("stringr")
}
if(!require("lubridate")){
install.packages("lubridate")
}
library(stringr)
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
lubridate::ymd(twDate_reformat) -> westernDate
return(westernDate)
}
install.packages("clipr")}
if(!require("clipr")){
install.packages("clipr")}
if(!require("SOAR")){
install.packages("SOAR")}
askSilly_weather <- function(locationInput,dateInput){
if(!require("jsonlite")){
install.packages("jsonlite")}
library(stringr)
if(str_detect(locationInput,"台")){
str_replace(locationInput,"台","臺")->locationInput
}
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
library(lubridate)
askSilly_weather("台北市",today())
return(fvalue)
myFun <- function(n){
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
return(fvalue)
}
myFun(54)
myFun(33)
jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1") -> examSubmissionTime
head(examSubmissionTime$section)
head(examSubmissionTime$time)
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei") #
howEarly <- deadline - lubridate::ymd_hms(
student_i_time, tz="Asia/Taipei")
print(howEarly)
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
print(howEarly)
readline("請輸入你的成績（整數）： ") -> grade # 單獨執行
if(grade >=90){
print("優")
} else if(grade>=80 & grade<=89){
print("良")
} else if(grade>=70 & grade<=79){
print("尚可")
} else {
print("待加強")
}
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
20*10*15
20*10*15 -> surface_A
class(surface_A)
surface_A
surface_cube <- function(length, width, height){
surface <- length*width*height
return(surface)
}
surface_cube(20, 10, 15)
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
read_csv("https://www.dropbox.com/s/9xzccsvwrnctzul/mask.csv?dl=1") -> Mask
Mask[[1]]
Mask[[1]][[1]]
(Mask[[1]][[1]] %% 2) ==1
(as.integer(Mask[[1]][[1]]) %% 2) ==1
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
str_extract(Mask, "[0-9]$")
read_csv("https://www.dropbox.com/s/9xzccsvwrnctzul/mask.csv?dl=1") -> Mask
str_extract(Mask, "[0-9]$")
# `1st_odd_or_even`
str_extract(Mask, "(?<=[:upper:])[0-9]+")
str_extract(Mask, "(?<=[:upper:])[0-9]+")
# `1st_odd_or_even`
str_extract_all(Mask, "(?<=[:upper:])[0-9]+")
nums <- str_extract_all(Mask, "(?<=[:upper:])[0-9]+")
# `1st_odd_or_even`
nums[[1]] %% 2
as.integer(nums)[[1]] %% 2
nums <- unlist(str_extract_all(Mask, "(?<=[:upper:])[0-9]+"))
nums <- as.integer(unlist(str_extract_all(Mask, "(?<=[:upper:])[0-9]+")))
nums[[1]] %% 2
nums[[1]] %% 2 -> `1st_odd_or_even`
`1st_odd_or_even`
odd_or_even <- function(Id){
num <- as.integer(unlist(str_extract_all(Id, "(?<=[:upper:])[0-9]+")))
return(num)
}
odd_or_even(Mask$身分證字號[[1]])
odd_or_even <- function(Id){
num <- as.integer(unlist(str_extract_all(Id, "(?<=[:upper:])[0-9]+"))) %% 2
return(num)
}
odd_or_even(Mask$身分證字號[[1]])
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
majors <- c("經濟系","社學系","社工系")
entranceYears <- 100:103
# 三系對100-103學年入學學生的四個年級課程規劃
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(entranceYear, major)) ->
list_major1_allYears # 經濟系
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~.get_courses(entranceYear, major)) ->
list_major1_allYears # 經濟系
data.frame(
weekday = str_c("星期",c("天","一","二","三","四","五","六")),
number = c(1:7)
) -> weekday_chart
chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6)
)
chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
weekday[[odd_or_even(Mask$身分證字號[[1]])+1]]
weekday_chart[[1]][[odd_or_even(Mask$身分證字號[[1]])+1]]
today()
wday()
wday()
wday(today())
wday(chart[[odd_or_even(Mask$身分證字號[[1]])+1]])
today(chart[[odd_or_even(Mask$身分證字號[[1]])+1]])
knitr::opts_chunk$set(echo = TRUE)
grade <- sample(1:100, 10, replace = T)
grade <- grade %>% cut(c(-1, 69, 79, 89, 100))
grade <- sample(1:100, 10, replace = T)
grade <- grade %>% cut(c(-1, 69, 79, 89, 100))
library(purrr)
grade <- grade %>% cut(c(-1, 69, 79, 89, 100))
library(purrr)
grade <- sample(1:100, 10, replace = T)
grade <- grade %>% cut(c(-1, 69, 79, 89, 100))
levels(grade)
letterGrade  # 有回存時要螢幕印出的訊息一定要加print
library(magrittr)
library(purrr)
library(magrittr)
grade <- sample(1:100, 10, replace = T)
grade <- grade %>% cut(c(-1, 69, 79, 89, 100))
levels(grade)
letterGrade  # 有回存時要螢幕印出的訊息一定要加print
library(stringr)
library(purrr)
library(magrittr)
grade <- sample(1:100, 10, replace = T)
grade <- grade %>% cut(c(-1, 69, 79, 89, 100))
levels(grade)
letterGrade  # 有回存時要螢幕印出的訊息一定要加print
library(stringr)
library(purrr)
library(magrittr)
grade <- sample(1:100, 10, replace = T)
grade <- grade %>% cut(c(-1, 69, 79, 89, 100))
levels(grade)
switch(as.character(grade[[1]]),
`(-1,69]` = {
print("-_-")
"F"
}, `(69,79]` = {
print("棒")
"C"
}, `(79,89]` = {
print("好棒")
"B"
}, `(89,100]` = {
print("好棒棒")
"A"
}) ->letterGrade  # 有回存時要螢幕印出的訊息一定要加print
